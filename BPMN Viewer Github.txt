{"created_by":"Tampermonkey","version":"1","scripts":[{"name":"BPMN Viewer","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":"document-start","override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":["https://github.com/*/pull/*/files"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]}},"storage":{"ts":1573246707757,"data":{}},"enabled":true,"position":1,"uuid":"e197d8e6-5d08-4a13-9557-bbb442900655","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBCUE1OIFZpZXdlcgovLyBAbmFtZXNwYWNlICAgIGh0dHA6Ly90YW1wZXJtb25rZXkubmV0LwovLyBAdmVyc2lvbiAgICAgIDAuMQovLyBAZGVzY3JpcHRpb24gIENyZWF0ZSBhIGJ1dHRvbiB0byBpbnNwZWN0IEJQTU4gZmlsZXMgaW4gZ2l0aHViIHB1bGwgcmVxdWVzdCByZXZpZXcgcGFnZQovLyBAYXV0aG9yICAgICAgIE1hcmNlbG8KLy8gQG1hdGNoICAgICAgICBodHRwczovL2dpdGh1Yi5jb20vKi9wdWxsLyovZmlsZXMKLy8gQGdyYW50ICAgICAgICBub25lCi8vIEByZXF1aXJlICAgICAgaHR0cHM6Ly91bnBrZy5jb20vYnBtbi1qc0A1LjEuMi9kaXN0L2JwbW4tdmlld2VyLmRldmVsb3BtZW50LmpzCi8vID09L1VzZXJTY3JpcHQ9PQoKZnVuY3Rpb24gaW5qZWN0SnMobGluaykgewogICAgdmFyIHNjciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpOwogICAgc2NyLnR5cGU9InRleHQvamF2YXNjcmlwdCI7CiAgICBzY3Iuc3JjPWxpbms7CiAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdLmFwcGVuZENoaWxkKHNjcik7Cn0KdmFyIGJwbW47CmZ1bmN0aW9uIHNob3dQcmV2aWV3KGVsZW1lbnRSZWYpIHsKICAgIHZhciB4bWxCUE1XaXRoSGVhZGVyID0gZWxlbWVudFJlZi5wYXJlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQucGFyZW50RWxlbWVudC5sYXN0RWxlbWVudENoaWxkLmlubmVyVGV4dDsKICAgIHZhciB4bWxCUE0gPSB4bWxCUE1XaXRoSGVhZGVyLnN1YnN0cih4bWxCUE1XaXRoSGVhZGVyLmluZGV4T2YoIkBAIiwgeG1sQlBNV2l0aEhlYWRlci5pbmRleE9mKCJAQCIpKzEpKzIpOwogICAgdG9nZ2xlTW9kYWwoKTsKICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdicG1uUHJldmlld0NhbnZhcycpLmlubmVySFRNTCA9ICcnOwogICAgYnBtbiA9IG5ldyBCcG1uSlMoe2NvbnRhaW5lcjogJyNicG1uUHJldmlld0NhbnZhcyd9KTsKICAgIGJwbW4uaW1wb3J0WE1MKHhtbEJQTSk7Cn0KCmZ1bmN0aW9uIHRvZ2dsZU1vZGFsKCkgewogICAgdmFyIG1vZGFsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiLm1vZGFsIik7CiAgICBtb2RhbC5jbGFzc0xpc3QudG9nZ2xlKCJzaG93LW1vZGFsIik7Cn0KCmZ1bmN0aW9uIHdpbmRvd09uQ2xpY2soZXZlbnQpIHsKICAgIHZhciBtb2RhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIi5tb2RhbCIpOwogICAgaWYgKGV2ZW50LnRhcmdldCA9PT0gbW9kYWwpIHsKICAgICAgICB0b2dnbGVNb2RhbCgpOwogICAgfQp9CgoKZnVuY3Rpb24gY3JlYXRlQnV0dG9uKGZpbGVJbmZvRWxlbWVudCkgewogICAgdmFyIGJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImJ1dHRvbiIpOwogICAgYnV0dG9uLmlubmVySFRNTD0KICAgICAgICBgPHN2ZyBjbGFzcz0ib2N0aWNvbiBvY3RpY29uLXNlYXJjaCIgdmlld0JveD0iMCAwIDE2IDE2IiB2ZXJzaW9uPSIxLjEiIHdpZHRoPSIxNiIgaGVpZ2h0PSIxNiIgYXJpYS1oaWRkZW49InRydWUiPjxwYXRoIGZpbGwtcnVsZT0iZXZlbm9kZCIgZD0iTTE1LjcgMTMuM2wtMy44MS0zLjgzQTUuOTMgNS45MyAwIDAwMTMgNmMwLTMuMzEtMi42OS02LTYtNlMxIDIuNjkgMSA2czIuNjkgNiA2IDZjMS4zIDAgMi40OC0uNDEgMy40Ny0xLjExbDMuODMgMy44MWMuMTkuMi40NS4zLjcuMy4yNSAwIC41Mi0uMDkuNy0uM2EuOTk2Ljk5NiAwIDAwMC0xLjQxdi4wMXpNNyAxMC43Yy0yLjU5IDAtNC43LTIuMTEtNC43LTQuNyAwLTIuNTkgMi4xMS00LjcgNC43LTQuNyAyLjU5IDAgNC43IDIuMTEgNC43IDQuNyAwIDIuNTktMi4xMSA0LjctNC43IDQuN3oiPjwvcGF0aD48L3N2Zz5gOwogICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoImNsaWNrIiwgKCkgPT4geyBzaG93UHJldmlldyhidXR0b24pIH0gKTsKICAgIGZpbGVJbmZvRWxlbWVudC5hcHBlbmRDaGlsZChidXR0b24pOwp9CgpmdW5jdGlvbiBkb2NSZWFkeShmbikgewogICAgLy8gc2VlIGlmIERPTSBpcyBhbHJlYWR5IGF2YWlsYWJsZQogICAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICJjb21wbGV0ZSIgfHwgZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gImludGVyYWN0aXZlIikgewogICAgICAgIC8vIGNhbGwgb24gbmV4dCBhdmFpbGFibGUgdGljawogICAgICAgIHNldFRpbWVvdXQoZm4sIDEpOwogICAgfSBlbHNlIHsKICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCJET01Db250ZW50TG9hZGVkIiwgKCk9PiBzZXRUaW1lb3V0KGZuLCAzMDAwKSk7CiAgICB9Cn0KCmRvY1JlYWR5KGZ1bmN0aW9uKCkgewogICAgdmFyIHBhcmVudE9mUHJldmlld0NhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2FwcGxpY2F0aW9uLW1haW4gJylbMF07LyoKdmFyIGJwbW5QcmV2aWV3Q2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7CiAgICBicG1uUHJldmlld0NhbnZhcy5pZCA9ICdicG1uUHJldmlld0NhbnZhcyc7CmJwbW5QcmV2aWV3Q2FudmFzLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CnBhcmVudE9mUHJldmlld0NhbnZhcy5hcHBlbmRDaGlsZChicG1uUHJldmlld0NhbnZhcyk7Ki8KICAgIHZhciBuZXdDaGlsZCA9IGAKPHN0eWxlPi5tb2RhbCB7CnBvc2l0aW9uOiBmaXhlZDsKbGVmdDogMDsKdG9wOiAwOwp3aWR0aDogMTAwJTsKaGVpZ2h0OiAxMDAlOwpiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNSk7Cm9wYWNpdHk6IDA7CnZpc2liaWxpdHk6IGhpZGRlbjsKdHJhbnNmb3JtOiBzY2FsZSgxLjEpOwp0cmFuc2l0aW9uOiB2aXNpYmlsaXR5IDBzIGxpbmVhciAwLjI1cywgb3BhY2l0eSAwLjI1cyAwcywgdHJhbnNmb3JtIDAuMjVzOwp9Ci5tb2RhbC1jb250ZW50IHsKcG9zaXRpb246IGFic29sdXRlOwp0b3A6IDUwJTsKbGVmdDogNTAlOwp0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTsKYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7CnBhZGRpbmc6IDFyZW0gMS41cmVtOwp3aWR0aDogOTAlOwpoZWlnaHQ6IDkwJTsKYm9yZGVyLXJhZGl1czogMC41cmVtOwp9Ci5jbG9zZS1idXR0b24gewpmbG9hdDogcmlnaHQ7CndpZHRoOiAxLjVyZW07CmxpbmUtaGVpZ2h0OiAxLjVyZW07CnRleHQtYWxpZ246IGNlbnRlcjsKY3Vyc29yOiBwb2ludGVyOwpib3JkZXItcmFkaXVzOiAwLjI1cmVtOwpiYWNrZ3JvdW5kLWNvbG9yOiBsaWdodGdyYXk7Cn0KLmNsb3NlLWJ1dHRvbjpob3ZlciB7CmJhY2tncm91bmQtY29sb3I6IGRhcmtncmF5Owp9Ci5zaG93LW1vZGFsIHsKb3BhY2l0eTogMTsKdmlzaWJpbGl0eTogdmlzaWJsZTsKdHJhbnNmb3JtOiBzY2FsZSgxLjApOwp0cmFuc2l0aW9uOiB2aXNpYmlsaXR5IDBzIGxpbmVhciAwcywgb3BhY2l0eSAwLjI1cyAwcywgdHJhbnNmb3JtIDAuMjVzOwp6LWluZGV4OiA5OTk5OTsKfQo8L3N0eWxlPgo8ZGl2IGNsYXNzPSJtb2RhbCIgaWQgPSJtb2RhbEJwbW5QcmV2aWV3Q2FudmFzIj4KPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+CjxzcGFuIGlkPSJjbG9zZUJ1dHRvbiIgY2xhc3M9ImNsb3NlLWJ1dHRvbiI+JnRpbWVzOzwvc3Bhbj4KPGRpdiBpZD0iYnBtblByZXZpZXdDYW52YXMiIHN0eWxlPSJ3aWR0aDogMTAwJTtoZWlnaHQ6IDEwMCU7bWFyZ2luLXRvcDoxLjVyZW07Ij48L2Rpdj4KPC9kaXY+CjwvZGl2Pgo8c2NyaXB0Pgo8L3NjcmlwdD4KYDsKICAgIHBhcmVudE9mUHJldmlld0NhbnZhcy5pbm5lckhUTUwgKz0gbmV3Q2hpbGQ7CiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCJbZGF0YS1maWxlLXR5cGU9Jy5icG1uJ10gZGl2LmZpbGUtaW5mbyIpLmZvckVhY2goKGVsKT0+Y3JlYXRlQnV0dG9uKGVsKSk7CiAgICB2YXIgY2xvc2VCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiY2xvc2VCdXR0b24iKTsKICAgIGNsb3NlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoImNsaWNrIiwgdG9nZ2xlTW9kYWwpOwogICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoImNsaWNrIiwgd2luZG93T25DbGljayk7Cn0pOwoKCnZhciBtb2RhbFN0eWxlID0gYC8qIFRoZSBNb2RhbCAoYmFja2dyb3VuZCkgKi8KLm1vZGFsIHsKZGlzcGxheTogbm9uZTsgLyogSGlkZGVuIGJ5IGRlZmF1bHQgKi8KcG9zaXRpb246IGZpeGVkOyAvKiBTdGF5IGluIHBsYWNlICovCnotaW5kZXg6IDE7IC8qIFNpdCBvbiB0b3AgKi8KbGVmdDogMDsKdG9wOiAwOwp3aWR0aDogMTAwJTsgLyogRnVsbCB3aWR0aCAqLwpoZWlnaHQ6IDEwMCU7IC8qIEZ1bGwgaGVpZ2h0ICovCm92ZXJmbG93OiBhdXRvOyAvKiBFbmFibGUgc2Nyb2xsIGlmIG5lZWRlZCAqLwpiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMCwwLDApOyAvKiBGYWxsYmFjayBjb2xvciAqLwpiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsMCwwLDAuNCk7IC8qIEJsYWNrIHcvIG9wYWNpdHkgKi8KfQoKLyogTW9kYWwgQ29udGVudC9Cb3ggKi8KLm1vZGFsLWNvbnRlbnQgewpiYWNrZ3JvdW5kLWNvbG9yOiAjZmVmZWZlOwptYXJnaW46IDE1JSBhdXRvOyAvKiAxNSUgZnJvbSB0aGUgdG9wIGFuZCBjZW50ZXJlZCAqLwpwYWRkaW5nOiAyMHB4Owpib3JkZXI6IDFweCBzb2xpZCAjODg4Owp3aWR0aDogODAlOyAvKiBDb3VsZCBiZSBtb3JlIG9yIGxlc3MsIGRlcGVuZGluZyBvbiBzY3JlZW4gc2l6ZSAqLwp9CgovKiBUaGUgQ2xvc2UgQnV0dG9uICovCi5jbG9zZSB7CmNvbG9yOiAjYWFhOwpmbG9hdDogcmlnaHQ7CmZvbnQtc2l6ZTogMjhweDsKZm9udC13ZWlnaHQ6IGJvbGQ7Cn0KCi5jbG9zZTpob3ZlciwKLmNsb3NlOmZvY3VzIHsKY29sb3I6IGJsYWNrOwp0ZXh0LWRlY29yYXRpb246IG5vbmU7CmN1cnNvcjogcG9pbnRlcjsKfWA=","requires":[{"meta":{"name":"bpmn-viewer.development.js","url":"https://unpkg.com/bpmn-js@5.1.2/dist/bpmn-viewer.development.js","ts":1573251324030,"mimetype":"text/javascript"},"source":""}]}]}